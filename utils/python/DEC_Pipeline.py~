import os
import pdb
from numba import types
from numba import jit
from numba.compiler import BasePipeline, compile_result, _LowerResult

from numba import (bytecode, interpreter, funcdesc, postproc,
                   typing, typeinfer, lowering, pylowering, utils, config,
                   errors, types, ir, rewrites, transforms)

import llvmlite.binding as ll
# for ll.parse_assembly

from llvmlite.llvmpy.core import Constant, Type, Builder

DEC_options = {"dump_llvm": False ,
               "llvm_outfile": "DEC_pipeline_out.llvm"}

class DEC_Options():
    
    @staticmethod
    def set_dump_llvm(v=True, outname="DEC_pipeline_out.llvm"):
        global DEC_options
        DEC_options["dump_llvm"] = True
        DEC_options["llvm_outtile"] = outname


def native_lowering_stage(targetctx, library, interp, typemap, restype,
                          calltypes, flags, metadata):
    # Lowering
    fndesc = funcdesc.PythonFunctionDescriptor.from_specialized_function(
        interp, typemap, restype, calltypes, mangler=targetctx.mangler,
        inline=flags.forceinline, noalias=flags.noalias)


    with targetctx.push_code_library(library):
        lower = lowering.Lower(targetctx, library, fndesc, interp,
                               metadata=metadata)
        lower.lower()

        if not flags.no_cpython_wrapper:
            lower.create_cpython_wrapper(flags.release_gil)
        env = lower.env
        call_helper = lower.call_helper
        del lower



    if flags.no_compile:
        return _LowerResult(fndesc, call_helper, cfunc=None, env=env)
    else:
        # Prepare for execution
        # pdb.set_trace()

        if DEC_options["dump_llvm"]:
            fh = open(DEC_options["llvm_outfile"], 'w')
            fh.write(library.get_llvm_str())
            fh.close()

        # For reading in new llvm files
        #codegen = library.codegen
        #library2 = codegen.create_library('tylers_test')
        #from pathlib import Path
        #contents = Path("test_ir.ll").read_text()
        #new_module = ll.parse_assembly(contents)
        #library2.add_llvm_module(new_module)

        
        cfunc = targetctx.get_executable(library, fndesc, env)
        # Insert native function for use by other jitted-functions.
        # We also register its library to allow for inlining.
        targetctx.insert_user_function(cfunc, fndesc, [library])
        return _LowerResult(fndesc, call_helper, cfunc=cfunc, env=env)


class DEC_Pipeline(BasePipeline):
    """
    The default compiler pipeline
    """
    def define_pipelines(self, pm):
        if not self.flags.force_pyobject:
            self.define_nopython_pipeline(pm)
    
    def add_lowering_stage(self, pm):
        """
        Add the lowering (code-generation) stage for nopython-mode
        """
        pm.add_stage(self.stage_nopython_backend, "nopython mode backend")
        pm.add_stage(self.DECADES_pass, "DECADES passes")

    def stage_nopython_backend(self):
        """
        Do lowering for nopython
        """
        lowerfn = self.backend_nopython_mode
        self._backend(lowerfn, objectmode=False)

    def _backend(self, lowerfn, objectmode):
        """
        Back-end: Generate LLVM IR from Numba IR, compile to machine code
        """
        if self.library is None:
            codegen = self.targetctx.codegen()
            self.library = codegen.create_library(self.func_id.func_qualname)
            # Enable object caching upfront, so that the library can
            # be later serialized.
            self.library.enable_object_caching()
            

        lowered = lowerfn()
        signature = typing.signature(self.return_type, *self.args)
        self.cr = compile_result(
            typing_context=self.typingctx,
            target_context=self.targetctx,
            entry_point=lowered.cfunc,
            typing_error=self.status.fail_reason,
            type_annotation=self.type_annotation,
            library=self.library,
            call_helper=lowered.call_helper,
            signature=signature,
            objectmode=objectmode,
            interpmode=False,
            lifted=self.lifted,
            fndesc=lowered.fndesc,
            environment=lowered.env,
            metadata=self.metadata,
            )

    def backend_nopython_mode(self):
        """Native mode compilation"""
        msg = ("Function %s failed at nopython "
               "mode lowering" % (self.func_id.func_name,))
        with self.fallback_context(msg):
            return native_lowering_stage(
                self.targetctx,
                self.library,
	        self.func_ir,
                self.typemap,
                self.return_type,
                self.calltypes,
                self.flags,
                self.metadata)

    def DECADES_pass(self):
        pass
