from __future__ import division, print_function
import argparse
from time import time
import numpy as np
from numba import int32, float32, float64,jitclass, njit
from numba.types import Tuple
from scipy.sparse import csr_matrix, coo_matrix


spec = [
    ('indptr', int32[:]),                   # integer field         
    ('indices', int32[:]),                  # integer field
]

@jitclass(spec)
class DecSparseGraph:
    def __init__(self, graph_indptr, graph_indices):
        self.indptr = graph_indptr
        self.indices = graph_indices

def LoadDecSparseGraph(filename):
    with open(filename) as f:
        t=time()
        graph_edge_data = np.fromfile(f, count=-1, sep='\t',dtype=np.int32)
        print('loading data took ',time()-t)
        t=time()
        graph_edge_data = np.reshape(graph_edge_data, (int(len(graph_edge_data) / 2), 2))
        print('reshaping data took ', time()-t)
    n = np.max(graph_edge_data) + 1
    t=time()
    graph_edge_data = np.concatenate((graph_edge_data,np.flip(graph_edge_data, axis=1)),axis=0)
    num=np.max(graph_edge_data)
    data=np.ones(graph_edge_data.shape[0])
    row=graph_edge_data[:,0]
    column=graph_edge_data[:,1]
    graph=csr_matrix((data,(row,column)),shape=(num+1,num+1))
    print('loading to csr sparse matrix took: ',time()-t)

    t=time()
    print('converting to csr took ', time()-t)
    sparse_graph = DecSparseGraph(graph.indptr, graph.indices)

    return sparse_graph, n
